hotelDf <- hotelDf[hotelDf$adr>0,]
hotel.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotel.reserved <- aggregate(!hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotelnameDf <- rbind(hotel.reserved,hotel.canceled)
colnames(hotelnameDf) <- c('hotel', 'count')
hotelnameDf$status <- c('reserved','reserved','canceled','canceled')
# 나라별 예약/취소 현황
country.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$country), FUN=sum)
country.reserved <- aggregate(!hotelDf$is_canceled, by=list(hotelDf$country), FUN=sum)
countryDf <- inner_join(country.reserved, country.canceled, by="Group.1")
colnames(countryDf) <- c('country', 'reserved', 'canceled')
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "호텔 예약/취소 현황 분석"),
dashboardSidebar(
size = "wide", color = "teal",
sidebarMenu(
menuItem(tabName = "plot1", "호텔별"),
menuItem(tabName = "plot2", "나라별")
)
),
dashboardBody(
tabItem(tabName = "plot1",
fluidRow(plotOutput('plot1'))
),
tabItem(tabName = "plot2",
fluidRow(plotlyOutput('plot2'))
),
theme = 'simplex'
))
# Define server logic required to draw a histogram
server <- function(input, output) {
output$plot1 <- renderPlot({
# ggplot2로 그래프를 그려 보세요
ggplot(hotelnameDf, aes(x=hotel, y=count, fill=status)) +
ggtitle("Reservation/Cancellation Status by Hotel") +
geom_bar(position='dodge', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_dodge(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
coord_cartesian(ylim = c(0,50000)) +
theme(panel.background = element_blank(),
text = element_text(face='bold'),
plot.title = element_text(face='bold'),
axis.title.x = element_text(size=15, face='bold'),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=15, face='bold'),
legend.position = 'top')
})
output$plot2 <- renderPlotly({
p <- ggplot(countryDf, aes(reserved, canceled)) +
ggtitle("Reservation/Cancellation Status by Country") +
geom_point(aes(color = country, size = reserved+canceled), alpha = 0.5) +
scale_fill_viridis(discrete=TRUE, guide=FALSE, option="A") +
scale_size(range=c(1,12)) +
theme_bw() +
ylim(c(1,30000)) +
theme(legend.position = 'none', plot.title = element_text(face='bold'),
text = element_text(family = "Consolas", face='bold'))
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp('app - 복사본.R')
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "호텔 예약/취소 현황 분석"),
dashboardSidebar(
size = "wide", color = "teal",
sidebarMenu(
menuItem(tabName = "plot1", "호텔별"),
menuItem(tabName = "plot2", "나라별")
)
),
dashboardBody(
tabItem(tabName = "plot1",
fluidRow(plotOutput('plot1'))
),
tabItem(tabName = "plot2",
fluidRow(plotlyOutput('plot2'))
), theme = 'simplex'
))
runApp('app - 복사본.R')
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "호텔 예약/취소 현황 분석"),
dashboardSidebar(
size = "wide", color = "teal",
sidebarMenu(
menuItem(tabName = "plot1", "호텔별"),
menuItem(tabName = "plot2", "나라별")
)
),
dashboardBody(
tabItem(tabName = "plot1",
fluidRow(plotOutput('plot1'))
),
tabItem(tabName = "plot2",
fluidRow(plotlyOutput('plot2'))
),
dashboardBody(col = 'ligh yellow',
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Georgia", Times, "Times New Roman", serif;
font-weight: bold;
font-size: 24px;
}')))),
theme = 'simplex'
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
library(semantic.dashboard)
runApp('app - 복사본.R')
remove.packages('shinydashboard')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
library(semantic.dashboard)
runApp('app - 복사본.R')
hotelDf <- read.csv('./hotel_bookings.csv')
sum(is.na(hotelDf))
hotelDf <- na.omit(hotelDf)
sum(is.na(hotelDf))
hotelDf <- hotelDf[hotelDf$country!='NULL',]
hotelDf <- hotelDf[hotelDf$adr>0,]
hotel.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotel.reserved <- aggregate(!hotelDf$is_canceled, by=list(hotelDf$hotel), FUN=sum)
hotelnameDf <- rbind(hotel.reserved,hotel.canceled)
colnames(hotelnameDf) <- c('hotel', 'count')
hotelnameDf$status <- c('reserved','reserved','canceled','canceled')
# 나라별 예약/취소 현황
country.canceled <- aggregate(hotelDf$is_canceled, by=list(hotelDf$country), FUN=sum)
country.reserved <- aggregate(!hotelDf$is_canceled, by=list(hotelDf$country), FUN=sum)
countryDf <- inner_join(country.reserved, country.canceled, by="Group.1")
colnames(countryDf) <- c('country', 'reserved', 'canceled')
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "호텔 예약/취소 현황 분석"),
dashboardSidebar(
size = "wide", color = "teal",
sidebarMenu(
menuItem(tabName = "plot1", "호텔별"),
menuItem(tabName = "plot2", "나라별")
)
),
dashboardBody(
tabItem(tabName = "plot1",
fluidRow(plotOutput('plot1'))
),
tabItem(tabName = "plot2",
fluidRow(plotlyOutput('plot2'))
), theme = 'simplex'
))
library(semantic.dashboard)
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "호텔 예약/취소 현황 분석"),
dashboardSidebar(
size = "wide", color = "teal",
sidebarMenu(
menuItem(tabName = "plot1", "호텔별"),
menuItem(tabName = "plot2", "나라별")
)
),
dashboardBody(
tabItem(tabName = "plot1",
fluidRow(plotOutput('plot1'))
),
tabItem(tabName = "plot2",
fluidRow(plotlyOutput('plot2'))
), theme = 'simplex'
))
installed.packages()
library(shiny); runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
runApp('app - 복사본.R')
ggplot(monthDf, aes(x=month, y=reserved)) +
geom_point() +
geom_segment( aes(x=month, xend=month, y=0, yend=reserved))
runApp('app - 복사본.R')
ggplot(familyDf, aes(x=Group.1, y=x)) +
geom_point() +
geom_segment(aes(x=Group.1, xend=Group.1, y=0, yend=x))
runApp('app - 복사본.R')
# libraries:
library(ggplot2)
library(gganimate)
# libraries:
library(ggplot2)
library(gganimate)
# libraries:
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
# libraries:
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# libraries:
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
l
# libraries:
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
runApp('app - 복사본.R')
# libraries:
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
library(ggplot2)
library(gganimate)
library(babynames)
library(ggplot2)
library(gganimate)
library(babynames)
library(hrbrthemes)
# Keep only 3 names
don <- babynames %>%
filter(name %in% c("Ashley", "Patricia", "Helen")) %>%
filter(sex=="F")
# Plot
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
library(ggplot2)
library(gganimate)
library(babynames)
library(hrbrthemes)
# Keep only 3 names
don <- babynames %>%
filter(name %in% c("Ashley", "Patricia", "Helen")) %>%
filter(sex=="F")
# Plot
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
ggplot(monthDf, aes(x=month, y=reserved)) +
geom_line() +
geom_point() +
transition_reveal(moth)
ggplot(monthDf, aes(x=month, y=reserved)) +
geom_line() +
geom_point() +
transition_reveal(month)
don <- babynames %>%
filter(name %in% c("Ashley", "Patricia", "Helen")) %>%
filter(sex=="F")
# Plot
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
ggplot(hotelnameDf, aes(x=hotel, y=count, fill=status)) +
ggtitle("Reservation/Cancellation Status by Hotel") +
geom_bar(position='dodge', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_dodge(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
coord_cartesian(ylim = c(0,50000)) +
theme(panel.background = element_blank(),
text = element_text(face='bold'),
plot.title = element_text(face='bold'),
axis.title.x = element_text(size=15, face='bold'),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=15, face='bold'),
legend.position = 'top') +
transition_states(status, transition_length = 4, state_length = 1) +
ease_aes('cubic-in-out')
ggplot(hotelnameDf, aes(x=hotel, y=count, fill=status)) +
ggtitle("Reservation/Cancellation Status by Hotel") +
geom_bar(position='dodge', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_dodge(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
coord_cartesian(ylim = c(0,50000)) +
theme(panel.background = element_blank(),
text = element_text(face='bold'),
plot.title = element_text(face='bold'),
axis.title.x = element_text(size=15, face='bold'),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=15, face='bold'),
legend.position = 'top') +
transition_states(hotel, transition_length = 4, state_length = 1)
ggplot(hotelnameDf, aes(x=hotel, y=count, fill=status)) +
ggtitle("Reservation/Cancellation Status by Hotel") +
geom_bar(position='dodge', stat = 'identity') +
scale_fill_manual(values = c('#7BDDFC','#FFBE70')) +
geom_text(aes(label = sprintf('%d',count)),
position = position_dodge(0.9),
hjust = 0.5, vjust = -0.5) +
scale_y_discrete() +
coord_cartesian(ylim = c(0,50000)) +
theme(panel.background = element_blank(),
text = element_text(face='bold'),
plot.title = element_text(face='bold'),
axis.title.x = element_text(size=15, face='bold'),
axis.text.x = element_text(size=12),
axis.title.y = element_text(size=15, face='bold'),
legend.position = 'top') + enter_grow() +
transition_states(status, transition_length = 4, state_length = 1)
runApp('C:/RProject/MyShinyApp/mythird')
library(gapminder)
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country) #x, y축, 점 크기, 색깔 설정
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() + #점의 파레트 설정
scale_size(range = c(2, 12)) +
scale_x_log10() + #x축 로그 스케일로 설정
labs(x = "GDP per capita", y = "Life expectancy")
p
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() + #점의 파레트 설정
scale_size(range = c(2, 12)) +
scale_x_log10() + #x축 로그 스케일로 설정
labs(x = "GDP per capita", y = "Life expectancy")
p
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() + #점의 파레트 설정
scale_size(range = c(2, 12)) +
scale_x_log10() + #x축 로그 스케일로 설정
labs(x = "GDP per capita", y = "Life expectancy")
p
